#summary Utilities made for the purpose of this project

= Utilities =
== cuobjdump output processor ==
Recovers correct opcode binary digits from the output of cuobjdump.
Usage:
<pre>
cuobjdump -sass(or something else) file.cubin>in.txt
cuprocess in.txt out.txt
</pre>

The program makes heavy assumption about the input file and produces messy stuff for non-instruction lines, though that should not matter as long as you follow the usage above.

[http://code.google.com/p/asfermi/source/browse/trunk/utilities/cuprocess.cpp Source]

== cubin binary editor ==
A very simple binary mode editor I made for myself. Written in C#.NET. Contains binary for Windows with .NET Framework 3.5 or higher.

This program displays opcode in binary mode and the least significant bit is displayed first.

Usage: Open program. Click Browse, choose file. Click Load. Scroll to the instruction location you want(You need another binary editor to locate the instruction first). If your instruction location has an offset that is a multiple of 4 instead of 8, enter 4 into the num box and click Set Offset. Do editing as you normally would with a binary editor then click Write Back.

Ctrl+Up = go to the box above
Ctrl+Down = go to box below

Now supports command line arguments

<pre>CUBINEditor inputfile offset</pre>

Note: May contain bug, as most of it was written while I was half-asleep. This program is written with minimal complexity so you could expect crashes whenever you do something I did not expect.
[http://code.google.com/p/asfermi/downloads/detail?name=CUBINEditor%20v2.zip Download]