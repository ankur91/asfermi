#summary opcodes for floaitng point instructions

Note: round brackets, instead of square brackets, are used to represent an optional component. This is to avoid confusion with memory operands which are surrounded by square brackets.

Also, [Opcode#imme immea] and [SourceFormat#Composite_operand composite operand] may be mentioned in the parts below. Please visit these two links for more information regarding their meaning.

=== Floating Point Instructions ===
<wiki:toc/>
==== FADD ====
Instruction Usage:
{{{
FADD reg0, reg1, (-)composite operand;
}}}
If the third operand is a floating point number, it will be a 32-bit floaitng point number with the last 12 bits truncated. If the negative sign in the immediate value is before 'F', then a modifier bit will be flipped. If the negative sign comes after the 'F', then the 20-bit immediate value will have the negative bit set.

Template opcode:
{{{
0000 000000 1110 000000 000000 0000000000000000000000 0000000000 001010
        mod        reg0   reg1                  immea
}}}
||mod 1|| meaning ||
||0    ||default||
||1    ||-composite operand||

----
==== FADD32I ====
Instruction usage:
{{{
FADD32I(.FTZ) reg0, (-/|)reg1(|), 0xabcd;
}}}
Template opcode
{{{
0100 000000 1110 000000 000000 00000000000000000000000000000000 010100
        mod        reg0   reg1                           0xabcd
}}}
||mod bit|| meaning  ||
||0      ||0: default||
||       ||1: -reg1||
||2      ||0: default||
||       ||1: |reg1| ||
||4      ||0: default||
||       ||1: .FTZ||

----
==== FMUL ====
Instruction usage:
{{{
FMUL(.rnd)(.SAT)(.fma) reg0, reg1, (-)composite operand;
}}}
Template opcode:
{{{
0000 000000 1110 000000 000000 0000000000000000000000 0000000000 011010
        mod        reg0   reg1                  immea       mod2
}}}
||mod2 0||meaning||
||0     ||default||
||1     ||-composite operand||

||mod2 1:2 || .rnd||
||00||default (.rn) ||
||10||.RM ||
||01||.RP ||
||11||.RZ ||

||mod 0:1||.fma||
||00     ||default||
||10     ||.FMA  ||
||10     ||.FMA2 ||
||11     ||Invalid||

||mod 4 value||meaning||
||0          ||default||
||1          ||.SAT||


----
==== FMUL32I ====
Instruction usage:
{{{
FMUL32I(.FTZ)(.SAT) reg0, reg1, F(-)123.123;
}}}
Template opcode:
{{{
0100 000000 1110 000000 000000 00000000000000000000000000000000 001100
        mod        reg0   reg1                        fp number
}}}
||mod 0:1||meaning||
||00     ||default||
||10     ||.FMA   ||
||10     ||.FMA2  ||
||11     ||Invalid||

||mod 2||meaning||
||0    ||default||
||1    ||.FMZ||

||mod 3||meaning||
||0    ||default||
||1    ||.FTZ||

||mod 4||meaning||
||0    ||default||
||1    ||.SAT||

----
==== FFMA ====
Instruction Usage:
{{{
FFMA(.roundOp)(.SAT) reg0, reg1, (-)composite operand, (-)reg3;
}}}
Template Opcode
{{{
0000 000000 1110 000000 000000 0000000000000000000000 0 000000  000 001100
        mod        reg0   reg1                  immea     reg3 mod2
}}}
mod2 1:2, mod 3,4 follow the same rules as in FMUL.

||mod 0||meaning||
||0    ||default||
||1    ||-composite operand||

||mod 1||meaning||
||0    ||default||
||1    ||-reg3  ||



----
==== FSETP ====
Instruction usage:
{{{
FSETP.comparator(.logical op) p (,|p), register, composite operand (,opp);
}}}
For what p, |p and opp mean, please refer to the setp instruction section in the ptx manual.

Template opcode:
{{{
1100 010000 1110 111 000 000000 0000000000000000000000 0 1110 000000 11000
        mod        p  |p   reg1                  immea    opp   mod2
}}}
||mod2 0:3 value|| comparator||
||1             ||.LT||
||2             ||.EQ||
||3             ||.LE||
||4             ||.GT||
||5             ||.NE||
||6             ||.GE||
||7             ||.NUM||
||8             ||.NAN||
||9             ||.LTU||
||10            ||.EQU||
||11            ||.LEU||
||12            ||.GTU||
||14            ||.GEU||

||mod2 4:5 value || logical operation||
||0              ||.AND||
||1              ||.OR||
||2              ||.XOR||

----
==== DADD ====
Instruciton usage
{{{
DADD reg0, reg1, composite operand;
}}}
Template opcode
{{{
1000 000000 1110 000000 000000 0000000000000000000000 0000000000 010010
        mod        reg0   reg1                  immea       mod2
}}}

----
==== DMUL ====
{{{
DMUL reg0, reg1, composite operand;
}}}
Template opcode
{{{{{{
1000 000000 1110 000000 000000 0000000000000000000000 0000000000 001010
        mod        reg0   reg1                  immea       mod2
}}}

----
==== DFMA ====
Instruction usage:
{{{
DFMA reg0, reg1, composite operand, reg3;
}}}
Template opcode
{{{
1000 000000 1110 000000 000000 0000000000000000000000 0 000000  000 000100
        mod        reg0   reg1                  immea     reg3 mod2
}}}