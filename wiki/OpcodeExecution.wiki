#summary opcodes for execution control instructions

Note: round brackets, instead of square brackets, are used to represent an optional component. This is to avoid confusion with memory operands which are surrounded by square brackets.

Also, [Opcode#imme immea] and [SourceFormat#Composite_operand composite operand] may be mentioned in the parts below. Please visit these two links for more information regarding their meaning.

=== Execution Control Instructions ===
<wiki:toc>
==== BRA ====
Instruction usage
{{{
BRA(.U)  const mem addr/(-)0xabcd;
}}}
Template opcode 
{{{
1110 011110 1110 000000 000000 000000000000000000000000 00000000 000010
                   mod2           const mem addr/0xabcd
}}}
||mod2 3||meaning||
||0     ||default||
||1     ||.LMT   ||

||mod2 4||meaning||
||0     ||default||
||1     ||.U     ||

||mod2 5||meaning||
||0     ||0xabcd ||
||1     ||const mem addr||


----
==== CAL ====
Instruction usage:
{{{
CAL(.NOINC) (-)0xabcd;
}}}
0xabcd is the address relative to the address of the instruction right after the CAL instruction. Note that the cuobjdump would output the absolute address of the target instruction in the kernel instead of the relative address. 0xabcd cannot 24 bits in length. 

Template opcode:
{{{
1110 000000 0000 001000 000000 000000000000000000000000 00000000 001010
                   mod2                          0xabcd
}}}
||mod2 bit||value and meaning||
||3       ||1: default||
||        ||.NOINC    ||
||5       ||0: default||
||        ||1: constant memory. Not supported for now.||

----
==== PRET ====
Set return address for the RET instruction

Instruction usage:
{{{
PRET  const mem addr/0xabcd;
}}}

Template code
{{{
1110 000000 0000   01 0000 000000 000000000000000000000000 00000000 011110
                 mod2                const mem addr/0xabcd
}}}
||mod2 0||meaning||
||0     ||.NOINC ||
||1     ||default||

||mod2 1||meaning||
||0     ||0xabcd||
||1     ||const mem addr||
----
==== RET ====
Template opcode:
{{{
1110 011110 1110 000000 000000 00000000000000000000000000000000 001001
}}}

----
==== EXIT ====
Template opcode:
{{{
1110 011110 1110 000000 000000 00000000000000000000000000000000 000001
}}}

----
==== NOP ====
Instruction usage:
{{{
NOP(.TRIG)(.Op)(.S) (CC(.CCop)) (, 0xabcd);
}}}
Template opcode:
{{{
0010 011110 1110 000000 000000 0000000000000000 00000000 00000000 000010
        mod                    0xabcd                        mod2
}}}
Note: the following modifiers are produced according to the output of cuobjdump. Whether they are meaningful to NOP or not is not confirmed. Conditional code operation seems to be supported by NOP, BRA, RET, EXIT, BRK and CONT.

||mod 0:4 value||.CCop||
||0            ||.F   ||
||1            ||.LT  ||
||2            ||.EQ  ||
||3            ||.LE  ||
||4            ||.GT  ||
||5            ||.NE  ||
||6            ||.GE  ||
||7            ||.NUM  ||
||8            ||.NAN  ||
||9            ||.LTU  ||
||10           ||.EQU  ||
||11           ||.LEU  ||
||12           ||.GTU  ||
||13           ||.NEU  ||
||14           ||.GEU  ||
||15           ||.T  ||
||16           ||.OFF  ||
||17           ||.LO  ||
||18           ||.SFF  ||
||19           ||.LS  ||
||20           ||.HI  ||
||21           ||.SFT  ||
||22           ||.HS  ||
||23           ||.OFT  ||
||24           ||.CSM_TA  ||
||25           ||.CSM_TR  ||
||26           ||.CSM_MX  ||
||27           ||.FCSM_TA  ||
||28           ||.FCSM_TR  ||
||29           ||.FCSM_MX  ||
||30           ||.RLE  ||
||31           ||.RGT  ||

||mod 5||meaning||
||0    ||default||
||1    ||.S     ||

||mod2 7||meaning||
||0     ||default||
||1     ||.TRIG  ||

||mod2 3:6 value||.Op ||
||0             ||none  ||
||1             ||.FMA64||
||2             ||.FMA32||
||3             ||.XLU  ||
||4             ||.ALU  ||
||5             ||.AGU  ||
||6             ||.SU   ||
||7             ||.FU   ||
||8             ||.FMUL ||

----
==== PBK ====
Instruction usage:
{{{
PBK constant mem address/0xabcd;
}}}
Template opcode
{{{
1110 000000 1110 0 00000 000000 000000000000000000000000 00000000 010110
                 m                     const addr/0xabcd
}}}
||m||meaning||
||0||0xabcd ||
||1||const addr||

----
==== BRK ====
Instruction usage:
{{{
BRK;
}}}
Template opcode
{{{
1110 01110 1110 000000 000000 00000000000000000000000000000000 010101
}}}


----
==== PCNT ====
Instruction usage:
{{{
PCNT const mem addr/0xabcd;
}}}
Template opcode:
{{{
1110 000000 1110 0 00000 000000 000000000000000000000000 00000000 001110
                 m                     const addr/0xabcd
}}}

||m||meaning||
||0||0xabcd ||
||1||const addr||

----
==== CONT ====
Instruction usage:
{{{
CONT;
}}}
Template opcode
{{{
1110 011110 1110 000000 000000 00000000000000000000000000000000 001101
}}}