#summary Program design of the Fermi assembler

<wiki:toc max_depth="2" />

=Basic types and global variables=
{{{
struct
{
int (*current_line_parser)(Line line);
int (*current_instruction_parser)(Instruction instruction);
int (*current_directive_parser)(Directive directive);
}current_state;

struct Line
{
    char* line_content;
    int line_number;
    void Parse()
    {
        curret_state.current_line_parser(self);
    }
};
struct Directive:: public Line
{
    int directive_type;
    int* directive_content; //array of pointers specific to each directive_type
    void Parse()
    {
        current_state.current_directive_parser(self);
    }
};
struct Instruction:: public Line
{
    char *instruction_string;
    int instruction_type;
    char *instruction_bytes;
    int *instruction_content; //array of pointers to content specific to each instruction_type. 
                              //Usually include operator1, operator2 or operator3
    void Parse()
    {
        current_state.current_instruction_parser(self);
    }
};
}}}

All the global states will be contained in a single struct
  * int line_number
  * List of directives encountered
  * bool inside_multi_line_comment
  * int current_parser

=Stages=
==Source file processing==
  * Read source file
  * Split source file into char`*``*`, with each char`*` containing one line
  * foreach( char`*` in char`*``*`)  {  parse(char`*`) }
==Parsing==
  * Ignore if this line is inside a multi-line comment section
  * Remove unnecessary white-space and in-line comment